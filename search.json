[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "REDCap API Guide",
    "section": "",
    "text": "Welcome\nThis guide was developed by a team of epidemiologists at the Washington State Departmentof Health. In this role, we were often tasked with developing data pipelines between REDCap and other agency data systems. These pipelines require custom transformation and an in-depth understanding of the data-types output by REDCap project. While REDCap is very widely used with ample training material on project design and customization, there is not much content specific to informatics and technical administrators. Searching for answers have even led to results like: “please consult informatics specialist in your organization”. After lots of trial and error and consulting among ourselves, this guide is the result. We hope to clearly illustrate the relationship between the data structures within REDCap (question type, instruments, events etc.,) to the resulting data format when exported to json or csv. Lastly, we provide code samples in R and Python to effectively interact with the REDCap features that the API provides. We hope it is helpful in your data processing and analytics journey.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro_overview.html",
    "href": "intro_overview.html",
    "title": "1  REDCap Overview",
    "section": "",
    "text": "REDCap (Research Electronic Data Capture) is a secure web application developed by Vanderbilt University in 2004, designed to facilitate data collection and management for research studies. It enables researchers to build and manage online surveys and databases quickly and efficiently, offering a robust set of features including customizable data collection instruments, SMS or email notifications, API import/export capability, audit trails, and user rights management. Initially created to support academic research, REDCap has since grown into a global consortium with over 5,000 institutional partners, supporting diverse projects in clinical, translational, and behavioral research. Its purpose is to streamline data management processes, ensuring data integrity, security, and compliance with regulatory standards",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>REDCap Overview</span>"
    ]
  },
  {
    "objectID": "intro_building_blocks.html",
    "href": "intro_building_blocks.html",
    "title": "2  REDCap Data Building Blocks",
    "section": "",
    "text": "For examples of REDCap project set-ups and exported data, see Chapter 4.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>REDCap Data Building Blocks</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html",
    "href": "intro_definitions.html",
    "title": "3  Definitions",
    "section": "",
    "text": "3.1 Records\nRecords are the set of information for a unique participant. Each record is composed of a number of fields (pieces of data), which can be spread across multiple instruments per record.\nExporting records returns all of the data entered into the record(s) of interest. By default, all records in the project will be returned. A subset of records can be specified.\nThe labels for the questions can be exported rather than the variable names. Similarly, the labels for the data entered can be exported instead of the corresponding raw numeric values that REDCap uses.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html#fields",
    "href": "intro_definitions.html#fields",
    "title": "3  Definitions",
    "section": "3.2 Fields",
    "text": "3.2 Fields\nFields are the individual places where data can be recorded (e.g., a question on a survey).\nExporting field names will capture the variable name, choice values (when applicable; e.g., for checkbox fields), and the modified export field name with the choice value appended.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html#instrumentsforms",
    "href": "intro_definitions.html#instrumentsforms",
    "title": "3  Definitions",
    "section": "3.3 Instruments/Forms",
    "text": "3.3 Instruments/Forms\nInstruments are a collection of fields to collect data. Instruments may be referred to as “forms” when being filled out by a project user or a “survey” when being filled out by external users (via a web link or email invitation).\nInstruments may be repeating or non-repeating and can be in either longitudinal or non-longitudinal projects. Repeating instruments can be set up to repeat a defined number of times or repeat an indefinite number of times. Each repeat is called an “instance”.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html#events",
    "href": "intro_definitions.html#events",
    "title": "3  Definitions",
    "section": "3.4 Events",
    "text": "3.4 Events\nEvents are required when a project is enabled as longitudinal. An event may be a temporal event during your longitudinal project, such as a participant visit or a task to be performed. The default is 1 event. Once a project is enabled as longitudinal, each instrument must be associated with an event.\nEvents may be repeating or non-repeating. When an event is set to repeating, all the instruments in that event will be repeated together. You can also specify to have specific instrument independtly repeat within an event. Each repeat of an Event or independent instrument is called an “instance”.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html#arms",
    "href": "intro_definitions.html#arms",
    "title": "3  Definitions",
    "section": "3.5 Arms",
    "text": "3.5 Arms\nEvents can be grouped into ‘arms’. There may be one or more arms for a project. Arms can be though of as different groups in a clinical trial (e.g., a test group and a control group). Each arm can have as many events as you wish. Each arm can have the same events or different events with different instruments. The default is 1 arm.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html#metadata",
    "href": "intro_definitions.html#metadata",
    "title": "3  Definitions",
    "section": "3.6 Metadata",
    "text": "3.6 Metadata\nMetadata refers to the project’s set up characteristics, including field attributes grouped by instrument assignment. Metadata can be thought of as the project’s data dictionary.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_definitions.html#reports",
    "href": "intro_definitions.html#reports",
    "title": "3  Definitions",
    "section": "3.7 Reports",
    "text": "3.7 Reports\nReports are a good way to view data from multiple records at once. REDCap has two default reports (A & B) and additional custom reports can be created. Report A displays all data for all records, while Report B can be customized to display data from specified instruments or events. Data can be exported from custom reports using the auto-generated report ID number.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Definitions</span>"
    ]
  },
  {
    "objectID": "intro_data_structure.html",
    "href": "intro_data_structure.html",
    "title": "4  Data Structure",
    "section": "",
    "text": "4.1 Example REDCap Projects and Data Structures\nThe base of every unique key is always the record_id. In non-longitudinal projects, there may also be a repeat_instrument and repeat_instance column if these features are enabled. In longitudinal projects, there will be an event_name column, as well as a repeat_instance column in the case of repeating events and a repeat_instrument column in the case of independently repeating instruments.\nThis unique key applies for studies with and without multiple arms. Each value for the event_name includes the study arm as a suffix. The suffix will automatically be *“_arm_1”* for longitudinal studies without additional arms.\nThese special unique key fields must be appropriately filled out in the data being imported to REDCap.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "intro_data_structure.html#repeating-events-and-independently-repeating-instruments",
    "href": "intro_data_structure.html#repeating-events-and-independently-repeating-instruments",
    "title": "4  Data Structure",
    "section": "4.2 Repeating Events and Independently Repeating Instruments",
    "text": "4.2 Repeating Events and Independently Repeating Instruments\nData is exported from REDCap projects as one large table where the length of the table (number of columns) is equal to all the fields across all project instruments.\nAssuming no repeating instruments or events, there is one row per record in non-longitudinal projects and one row per record-event in longitudinal projects. In the case of independently repeating instruments and repeating events, there is one additional row per repeat instance per record. Each row has all fields across all instruments, but the fields (columns) not associated with the instruments for that event (rows) will be NA.\nRegardless of how you choose to export REDCap project data (directly in REDCap or using an API), the data structure will be the same. Here is an example of the data structure for the REDCap project we will be using in this tutorial.\n\n\n\n\nIn this example:\n\nThe ‘close_contacts’ instrument repeats independently within the ‘notifications_arm_1’ event (only responses to the ‘close_contacts’ instrument are in these rows with one row per record per instance of the instrument).\nOne other instrument is also in the ‘notifications_arm_1’ event but does not repeat. This data populates a seperate row where the redcap_event_name = “notifications_arm_1”, but the redcap_repeat_instrument = “NA” and the redcap_repeat_instance = “NA”. Non-repeating instruments in an event will have their own row, seperate from independently repeating instruments in that same event.\nThe ‘case_intake_arm_1’ event repeats as an entire event, so each repeat of the event per record will occupy one row with the redcap_repeat_instance variable signifying the instance number.\nThe ‘personal_info_arm_1’ is not repeating, nor are the instruments within this event, so it occupies one row per record-event.\n\nNote: Since this is a longitudinal project example, the arm name is automatically appended as a suffix in the redcap_event_name column. In this project there is only one arm, so all events are exported with the “arm_1” suffix. However, if there were mutliple arms, the suffix would distinguish which arm each event is in.\nChecking the instrument event map will give you a quick understanding of the project structure. See Chapter 14 for how to do this via API.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "intro_data_structure.html#notes-on-redcap-data-types-and-api-exports",
    "href": "intro_data_structure.html#notes-on-redcap-data-types-and-api-exports",
    "title": "4  Data Structure",
    "section": "4.3 Notes on REDCap Data Types and API Exports",
    "text": "4.3 Notes on REDCap Data Types and API Exports\n\n4.3.1 Standard Field Types\n\ntext\nnotes\ncalculated field\ndropdown\nradio\ncheckbox\nyes/no\ntrue/false\nfile upload\ndescriptive\ndynamic query (sql)\n\n\n\n4.3.2 Non-Standard Field types\n\ninstrument_name_complete\n\nIn addition to the standard types, each instrument (form) has a column to indicate if the instrument is complete/incomplete/unverified. The instrument_name_complete field is exported via standard API call.\n\n\n4.3.3 API Export Records (default settings)\n\ntext\nnotes\ncalculated field\ndropdown\nradio\ncheckbox\nyes/no\ntrue/false\nfile upload\ndescriptive\ndynamic query (sql)\ninstrument_name_complete\n\nNote: “descriptive” field type is NOT exported",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "intro_data_structure.html#checkboxes",
    "href": "intro_data_structure.html#checkboxes",
    "title": "4  Data Structure",
    "section": "4.4 Checkboxes",
    "text": "4.4 Checkboxes\nCheckboxes are exported as a wide data set with each checkbox option stored as its own variable. These variables will be appended with a double underscore and the number that the choice option is assigned within REDCap. Alternatively, the actual choice can be viewed if you export the dataset with labeled headers.\nSee below for how the checkbox variable sympoms_exp exports. This checkbox had 11 different options and so it will occupy 11 columns. You can also see this question is asked in the case_intake_arm_1 event and so the value is NA in any row not associated with this event.\n\n\n\n\nNote: When putting the exported data into a pandas dataframe in Python, any raw values for coded data that are integer strings in REDCap become floats with a decimal appended. If this exported dataset were to be re-imported into REDCap, errors will arise for all of the fields with the now float-type data when REDCap is expecting an integer. See the Python section under Section 27.4 for more.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "intro_packages.html",
    "href": "intro_packages.html",
    "title": "5  R/Python Packages for REDCap’s API",
    "section": "",
    "text": "R and Python both have packages that make it easy to work with REDCap’s API. We recommend REDCapR in R and PyCap in Python. We will be using each of these packages to provide examples of different import and export options throughout this guide.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>R/Python Packages for REDCap's API</span>"
    ]
  },
  {
    "objectID": "intro_tokens.html",
    "href": "intro_tokens.html",
    "title": "6  Storing API tokens",
    "section": "",
    "text": "Before you can make any API calls to your REDCap project, you will need to generate an API token for that project. You can do so in the REDCap web application under the ‘API’ page of your project.\nIt is recommended to save your API tokens in a separate file on your local machine that is then called into your main script. That way you can share your script and push it to the GitHub without compromising your tokens. Tokens should be treated as secrets and should not be shared with others.\nTo follow along with this guide, you can save your tokens for each REDCap project as a json file with the following the format:\n\n{\n    \"prod_token\": {\n      \"REDCap Project ID Goes Here\": \"API token for that project goes here\",\n      \"REDCap Project ID Goes Here\": \"API token for that project goes here\"\n    },\n    \"dev_token\": {\n      \"REDCap Project ID Goes Here\": \"API token for that project goes here\",\n      \"REDCap Project ID Goes Here\": \"API token for that project goes here\"\n        },\n    \"qa_token\": {\n      \"REDCap Project ID Goes Here\": \"API token for that project goes here\",\n      \"REDCap Project ID Goes Here\": \"API token for that project goes here\"\n        }\n}\n\nNote: You can create a json file in any text editor by saving your file with a ‘.json’ extention.",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Storing API tokens</span>"
    ]
  },
  {
    "objectID": "intro_setup.html",
    "href": "intro_setup.html",
    "title": "7  Project & API Setup",
    "section": "",
    "text": "Install and load the necessary packages and set up the REDCap project connection.\n\nRPython\n\n\n\n%%capture --no-display \n%%R\nlibrary(\"dplyr\")\nlibrary(\"jsonlite\")\nlibrary(\"tidyr\")\nlibrary(\"REDCapR\")\nlibrary(\"knitr\")\nlibrary(\"remotes\")\nlibrary(\"gt\")\n\n\n%%capture --no-display --no-stdout\n%%R\n# Detach REDCapR if already loaded, and download the latest version\nif (version!='1.1.9005') {\n    detach(\"package:REDCapR\", unload=TRUE)\n    remotes::install_github(\"OuhscBbmc/REDCapR\")\n    library(\"REDCapR\")\n    print(packageVersion(\"REDCapR\"))\n}\nelse {\n    print(\"REDCapR package up to date\")\n}\n\n[1] '1.1.9005'\n\n\n\n%%R\n# Load API tokens from the json file\ntoken &lt;- jsonlite::fromJSON('./../../json_api_data.json')$dev_token$'309'\nurl &lt;- \"https://dev-redcap.doh.wa.gov/api/\"\n\n\n\n\nimport redcap\nimport json\nimport csv\nimport pandas as pd\nimport numpy as np\nimport requests\nimport tempfile\n\n\n# Load API tokens from the json file\nkey = json.load(open('./../../json_api_data.json'))\ntoken = key['dev_token']['309']\nurl = key['dev_url']\n\nproject = redcap.Project(url, token)",
    "crumbs": [
      "Introduction to REDCap",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Project & API Setup</span>"
    ]
  },
  {
    "objectID": "exports_2_records.html",
    "href": "exports_2_records.html",
    "title": "8  Records",
    "section": "",
    "text": "8.1 Exporting Raw Data",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Records</span>"
    ]
  },
  {
    "objectID": "exports_2_records.html#exporting-raw-data",
    "href": "exports_2_records.html#exporting-raw-data",
    "title": "8  Records",
    "section": "",
    "text": "RPython\n\n\nredcap_read_oneshot()\n\n%%capture \n%%R\nrecords &lt;- redcap_read_oneshot(\n    redcap_uri = url, \n    token = token\n)$data\n\n\n\n\n\n\n\nexport_records()\n\nrecords = project.export_records(format_type='df') #all records with raw data values\nrecords.head(10)\n\n\n\n\n\n\n\n\n\n\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\nphone_num\nzip_code\ndob\nage\nethnicity\nrace\n...\ncc_phone\ncc_email\nclose_contacts_complete\nsupervisor_name\nsupervisor_email\nwork_inperson_yesno\nwork_date\nwork_contagious\nwork_contagious_calc\nwork_information_complete\n\n\nrecord_id\nredcap_event_name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\npersonal_info_arm_1\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n2006-04-11\n18.0\n1.0\n4.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nNaN\n0.0\nNaN\n0.0\nNaN\n2.0\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\npersonal_info_arm_1\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n0.0\n5.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nfake_email@gmail.com\n1.0\n2023-10-10\n1.0\nNaN\n2.0\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ncase_intake_arm_1\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n10 rows × 46 columns\n\n\n\n\nWhen format_type = 'df', there is a multi-index automatically assigned including record_id and redcap_event_name.\nIt is not recommended to use the index automatically asigned upon export as it is not always correct. In this case, record_id, redcap_event_name, redcap_repeat_instrument, and redcap_repeat_instance combined define the unique key for this data frame. The user should asign their own index accordingly; best practice is to add is to use the reset_index() method on the data export to use the row number as the index.\nExporting as a CSV or JSON creates the index using the row number.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Records</span>"
    ]
  },
  {
    "objectID": "exports_2_records.html#sec-labeled",
    "href": "exports_2_records.html#sec-labeled",
    "title": "8  Records",
    "section": "8.2 Exporting Labeled Data & Headers",
    "text": "8.2 Exporting Labeled Data & Headers\nThe raw_or_label parameter exports raw or labeled choice values (i.e. ‘male’ instead of ‘1’), while the raw_or_label_headers parameter exports raw or labeled variable names (i.e. shows the actual prompt/question instead of the raw variable name).\n\nRPython\n\n\n\n%%capture\n%%R\ndata_labeled &lt;- redcap_read_oneshot(\n    redcap_uri = url, \n    token = token, \n    raw_or_label = \"label\", \n    raw_or_label_headers = \"label\")$data\n\n\n\n\n\n\n\n\ndata_labeled = project.export_records(raw_or_label='label', format_type='df').reset_index()\ndata_labeled.head(10)\n\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\nphone_num\nzip_code\ndob\nage\n...\ncc_phone\ncc_email\nclose_contacts_complete\nsupervisor_name\nsupervisor_email\nwork_inperson_yesno\nwork_date\nwork_contagious\nwork_contagious_calc\nwork_information_complete\n\n\n\n\n0\n1\nPersonal Info\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n2006-04-11\n18.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nNaN\nNo\nNaN\nNo\nNaN\nComplete\n\n\n2\n1\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n1\nNotifications\nClose Contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n1\nNotifications\nClose Contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n5\n2\nPersonal Info\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n6\n2\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nfake_email@gmail.com\nYes\n2023-10-10\nYes\nNaN\nComplete\n\n\n7\n2\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n8\n2\nCase Intake\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n9\n2\nNotifications\nClose Contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n10 rows × 48 columns\n\n\n\n\nNote: Exporting labeled headers only works when format_type='csv'.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Records</span>"
    ]
  },
  {
    "objectID": "exports_2_records.html#export-data-in-batches-redcapr-only",
    "href": "exports_2_records.html#export-data-in-batches-redcapr-only",
    "title": "8  Records",
    "section": "8.3 Export Data In Batches (REDCapR Only)",
    "text": "8.3 Export Data In Batches (REDCapR Only)\n\nR\n\n\nredcap_read() is almost the same as redcap_read_oneshot(). The only difference is that redcap_read() retrieves the data in quantified batches or rows, and then combines the batches to return a single data set. This function may be more appropriate than redcap_read_oneshot() when exporting large datasets that could tie up the server. (Source)\n\n%%capture\n%%R\nbatched_export &lt;- redcap_read(\n    redcap_uri = url, \n    token = token, \n    batch_size = 50L\n)$data\n\nIn this example, the batch size was set to 50 records. The default is 100 records. The data exported using this method has the exact same format as the data exported using redcap_read_oneshot.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Records</span>"
    ]
  },
  {
    "objectID": "exports_2_records.html#sec-next_record",
    "href": "exports_2_records.html#sec-next_record",
    "title": "8  Records",
    "section": "8.4 Exporting The Next Available Record ID",
    "text": "8.4 Exporting The Next Available Record ID\nWhen a project is set up in REDCap it has auto-numbering for records enabled by default. This allows a new and unique record_id to be automatically assigned every time you enter a new record within REDCap. Before importing new records via API, you may want to know what the next available Record ID is to ensure you are assigning new Record IDs to these new records before import (rather than overwriting an existing record).\nThis function is more important if using REDCapR because PyCap has a way to auto-number records on import.\n\nRPython\n\n\n\n%%capture --no-stdout\n%%R\nnext_record &lt;- redcap_next_free_record_name(\n    redcap_uri = url, \n    token = token, \n    verbose = TRUE,\n    config_options = NULL)\n\nnext_record\n\n[1] \"7\"\n\n\n\n\n\nproject.generate_next_record_name()\n\n'7'\n\n\n\n\n\nNote: If Data Access Groups (DAGs) are used in the REDCap project, this method accounts for the special formatting of the record name for users in DAGs, where the unique auto-assigned DAG number is a prefix to the actual record_id (i.e. &lt;DAG_ID&gt;_&lt;record_id&gt;). A user assigned to a DAG with ID 1732 that already has 3 existing records will return ‘1732-4’ as the next available record.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Records</span>"
    ]
  },
  {
    "objectID": "exports_3_reports.html",
    "href": "exports_3_reports.html",
    "title": "9  Reports",
    "section": "",
    "text": "9.1 Exporting Raw Reports\nIn this example, we will export the ‘Cases in October 2023’ report as seen in the image above.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reports</span>"
    ]
  },
  {
    "objectID": "exports_3_reports.html#exporting-raw-reports",
    "href": "exports_3_reports.html#exporting-raw-reports",
    "title": "9  Reports",
    "section": "",
    "text": "RPython\n\n\nredcap_report()\n\n%%capture\n%%R\ncases_oct_2023 &lt;- redcap_report(\n    redcap_uri = url, \n    token = token, \n    report_id = 2178\n)$data\n\n\n\n\n\n\n\nexport_report()\n\nproject.export_report(report_id='2178', format_type='df', raw_or_label='raw').reset_index().head(7)\n\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\nphone_num\nzip_code\ndob\nage\n...\nsymptoms_yesno\nsymptom_onset\nsymptoms_exp\nsymptom_notes\ntest_yesno\ntest_positive_yesno\ntest_positive_date\ntest_upload\nprior_covid_yesno\nprior_covid_date\n\n\n\n\n0\n1\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1\npersonal_info_arm_1\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n2006-04-11\n18.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n1\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n1.0\n2023-10-09\n1,2,7\nNaN\n1.0\n1.0\n2023-10-10\ntest_api_export_image.png\n0.0\nNaN\n\n\n3\n2\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n2\npersonal_info_arm_1\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n5\n2\ncase_intake_arm_1\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n1.0\n2021-06-05\n1,2,3,4,5,7,8,9\nNaN\n1.0\n1.0\n2021-06-07\ntest_api_export_pdf.pdf\n0.0\nNaN\n\n\n6\n2\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n1.0\n2023-10-11\n1,2,8\nNaN\n1.0\n1.0\n2023-10-12\ntest_api_export_pdf.pdf\n1.0\n2021-06-06\n\n\n\n\n7 rows × 23 columns",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reports</span>"
    ]
  },
  {
    "objectID": "exports_3_reports.html#sec-label_reports",
    "href": "exports_3_reports.html#sec-label_reports",
    "title": "9  Reports",
    "section": "9.2 Exporting Labeled Reports",
    "text": "9.2 Exporting Labeled Reports\nReports can also be exported as labeled data.\n\nRPython\n\n\n\n%%capture\n%%R\ncases_oct_2023_labeled &lt;- redcap_report(\n    redcap_uri = url, \n    token = token,\n    report_id = 2178, \n    raw_or_label = 'label'\n)$data\n\n\n\n\n\n\n\n\nproject.export_report(report_id='2178', format_type='df', raw_or_label='label').reset_index().head(7)\n\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\nphone_num\nzip_code\ndob\nage\n...\nsymptoms_yesno\nsymptom_onset\nsymptoms_exp\nsymptom_notes\ntest_yesno\ntest_positive_yesno\ntest_positive_date\ntest_upload\nprior_covid_yesno\nprior_covid_date\n\n\n\n\n0\n1\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1\nPersonal Info\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n2006-04-11\n18.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n1\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nYes\n2023-10-09\nSore Throat,Cough,Congestion\nNaN\nYes\nYes\n2023-10-10\ntest_api_export_image.png\nNo\nNaN\n\n\n3\n2\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n2\nPersonal Info\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n5\n2\nCase Intake\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nYes\n2021-06-05\nSore Throat,Cough,Shortness of Breath,Chest Pa...\nNaN\nYes\nYes\n2021-06-07\ntest_api_export_pdf.pdf\nNo\nNaN\n\n\n6\n2\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nYes\n2023-10-11\nSore Throat,Cough,Fever\nNaN\nYes\nYes\n2023-10-12\ntest_api_export_pdf.pdf\nYes\n2021-06-06\n\n\n\n\n7 rows × 23 columns\n\n\n\n\nNote: Exporting labeled headers only works when format_type='csv'. See Section 20.4 for more information.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reports</span>"
    ]
  },
  {
    "objectID": "exports_4_files.html",
    "href": "exports_4_files.html",
    "title": "10  Files",
    "section": "",
    "text": "File uploads (attachments to individual records) are a unique field type in REDCap that accept a variety of file types, including images, pdfs, and many more. Unlike other export methods, exporting files only works for one file field from one record at a time.\nIf the project has repeating events (i.e. a longitudinal project), the event name that the record is in must be specified. If the file of interest is in a repeat instance, the instance number must also be specified.\nIn this example we will download the test file from record 1 in the test_upload field in case_intake_arm_1 event, and save the file to a specified location.\n\nRPython\n\n\nredcap_file_download_oneshot()\n\n%%capture\n%%R\nredcap_file_download_oneshot(\n    event = \"case_intake_arm_1\",\n    directory = \"./files/export_files/\",\n    file_name = \"test_file_export_r.png\",\n    record = 1,\n    field = \"test_upload\",\n    redcap_uri = url,\n    token = token,\n    overwrite = TRUE\n)\n\n\n\n\n\n\n\n\nexport_file()\nIn python we will use the IPython.diplay module to view the downloaded file.\n\nexport_file_image = project.export_file(record=\"1\", \n                                        field=\"test_upload\", \n                                        event=\"case_intake_arm_1\")\nwith open(\"files/export_files/test_file_export_py.png\",\"wb\") as binary_file:\n    binary_file.write(export_file_image[0])\n\n\nfrom IPython.display import Image\nImage(\"files/export_files/test_file_export_py.png\", width=300)",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Files</span>"
    ]
  },
  {
    "objectID": "exports_5_metadata.html",
    "href": "exports_5_metadata.html",
    "title": "11  Metadata",
    "section": "",
    "text": "REDCap metadata can be exported via the API.\nThe REDCap metadata will contain all the fields in your REDCap project excluding:\n\nAny survey timestamp or survey identifier fields (automatically generated when a form is enabled as a survey).\nAny fields that are part of the unique key aside from the record_id (redcap_event_name, redcap_repeat_instrument and redcap_repeat_instance).\nAny &lt;form_name&gt;_complete fields.\nCheckbox fields are exported as one field per checkbox (not in the wide format as they appear in the data export).\n\nIn REDCap the record_id field can be renamed. The first field in the exported metadata will always be record_id or the ‘record_id’ equivalent field.\n\nRPython\n\n\nredcap_metadata_read()\n\n%%capture\n%%R\nmetadata &lt;- redcap_metadata_read(\n    redcap_uri = url, \n    token = token\n)$data\n\n\n\n\n\n\n\nexport_metadata()\n\nproject.export_metadata(format_type=\"df\").head(10)\n\n\n\n\n\n\n\n\n\nform_name\nsection_header\nfield_type\nfield_label\nselect_choices_or_calculations\nfield_note\ntext_validation_type_or_show_slider_number\ntext_validation_min\ntext_validation_max\nidentifier\nbranching_logic\nrequired_field\ncustom_alignment\nquestion_number\nmatrix_group_name\nmatrix_ranking\nfield_annotation\n\n\nfield_name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrecord_id\ndemographics\nNaN\ntext\nRecord ID\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nfirst_name\ndemographics\nPersonal Information\ntext\nFirst Name\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nlast_name\ndemographics\nNaN\ntext\nLast Name\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nphone_num\ndemographics\nNaN\ntext\nPhone Number\nNaN\nNaN\nphone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nzip_code\ndemographics\nNaN\ntext\nZIP Code\nNaN\nNaN\ninteger\n10001.0\n99999\ny\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ndob\ndemographics\nNaN\ntext\nDate of birth\nNaN\nNaN\ndate_mdy\nNaN\nNaN\ny\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nage\ndemographics\nNaN\ncalc\nAge (years)\nrounddown(datediff([dob],'today','y'))\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nethnicity\ndemographics\nNaN\nradio\nEthnicity\n0, Hispanic or Latino|1, NOT Hispanic or Latin...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nLH\nNaN\nNaN\nNaN\nNaN\n\n\nrace\ndemographics\nNaN\ndropdown\nRace\n0, American Indian/Alaska Native|1, Asian|2, N...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ngender\ndemographics\nNaN\nradio\nGender\n0, Female|1, Male|2, Other|3, Prefer not to say\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "exports_6_fields.html",
    "href": "exports_6_fields.html",
    "title": "12  Field Names",
    "section": "",
    "text": "Using the export field names method will export all fields including the &lt;form_name&gt;_complete fields and the checkbox fields in a wide format, unlike when exporting the project’s metadata.\nIt will exclude:\n\nAny survey timestamp or survey identifier fields (automatically generated when a form is enabled as a survey).\nAny fields that are part of the unique key aside from the record_id (i.e. redcap_event_name, redcap_repeat_instrument and redcap_repeat_instance).\n\n\nRPython\n\n\nredcap_variables()\n\n%%capture\n%%R\nfield_names &lt;- redcap_variables(\n    redcap_uri = url, \n    token = token, \n    verbose = TRUE, \n    config_options = NULL\n)$data\n\n\n\n\n\n\n\nexport_field_names()\n\nproject.export_field_names(format_type=\"df\").head(15)\n\n\n\n\n\n\n\n\n\nchoice_value\nexport_field_name\n\n\noriginal_field_name\n\n\n\n\n\n\nrecord_id\nNaN\nrecord_id\n\n\nfirst_name\nNaN\nfirst_name\n\n\nlast_name\nNaN\nlast_name\n\n\nphone_num\nNaN\nphone_num\n\n\nzip_code\nNaN\nzip_code\n\n\ndob\nNaN\ndob\n\n\nage\nNaN\nage\n\n\nethnicity\nNaN\nethnicity\n\n\nrace\nNaN\nrace\n\n\ngender\nNaN\ngender\n\n\ndemographics_complete\nNaN\ndemographics_complete\n\n\nsymptoms_yesno\nNaN\nsymptoms_yesno\n\n\nsymptom_onset\nNaN\nsymptom_onset\n\n\nsymptoms_exp\n1.0\nsymptoms_exp___1\n\n\nsymptoms_exp\n2.0\nsymptoms_exp___2",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Field Names</span>"
    ]
  },
  {
    "objectID": "exports_7_forms.html",
    "href": "exports_7_forms.html",
    "title": "13  Forms/Instruments",
    "section": "",
    "text": "13.1 Instrument Names and Labels\nYou can export a list of instrument names and their corresponding instrument labels.\nNote: Use the value under instrument_name (not instrument_label) when specifying specific instruments as arguments in the REDCapR and PyCap API functions.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Forms/Instruments</span>"
    ]
  },
  {
    "objectID": "exports_7_forms.html#instrument-names-and-labels",
    "href": "exports_7_forms.html#instrument-names-and-labels",
    "title": "13  Forms/Instruments",
    "section": "",
    "text": "RPython\n\n\nredcap_instruments()\n\n%%capture\n%%R\ninstruments &lt;- redcap_instruments(\n    redcap_uri = url, \n    token = token, \n    verbose = TRUE, \n    config_options = NULL\n)$data\n\n\n\n\n\n\n\nexport_instruments()\n\nproject.export_instruments(format_type = \"df\")\n\n\n\n\n\n\n\n\n\ninstrument_name\ninstrument_label\n\n\n\n\n0\ndemographics\nDemographics\n\n\n1\nsymptoms\nSymptoms\n\n\n2\ntest_information\nTest Information\n\n\n3\nclose_contacts\nClose Contacts\n\n\n4\nwork_information\nWork Information",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Forms/Instruments</span>"
    ]
  },
  {
    "objectID": "exports_7_forms.html#download-pdf-of-instruments",
    "href": "exports_7_forms.html#download-pdf-of-instruments",
    "title": "13  Forms/Instruments",
    "section": "13.2 Download PDF of Instruments",
    "text": "13.2 Download PDF of Instruments\nThese functions will download the instrument specified and all of the fields as a cleanly formatted questionnaire pdf file.\n\nRPython\n\n\nredcap_instrument_download()\n\n%%capture\n%%R\nredcap_instrument_download(\n    instrument = \"symptoms\",\n    directory = \"./files/instruments/\",\n    file_name = \"symptoms_instrument.pdf\",\n    redcap_uri = url,\n    overwrite = TRUE,\n    token = token\n)\n\n\n\n\n\n\n\nexport_pdf()\n\nclose_contact = project.export_pdf(instrument = 'close_contacts')\nwith open(\"files/instruments/close_contacts.pdf\",\"wb\") as binary_file:\n    binary_file.write(close_contact[0])\n\n\nfrom IPython.display import IFrame\nIFrame(\"files/instruments/close_contacts.pdf\", width=750, height=500)",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Forms/Instruments</span>"
    ]
  },
  {
    "objectID": "exports_8_instr_event_map.html",
    "href": "exports_8_instr_event_map.html",
    "title": "14  Instrument/Event Map",
    "section": "",
    "text": "14.1 Export the Instrument Event Mapping\nThis shows which instruments are associated with each event in longitudinal projects.\nNote: Events with multiple instruments (AKA ‘form’) will occupy multiple rows, with one row per instrument.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Instrument/Event Map</span>"
    ]
  },
  {
    "objectID": "exports_8_instr_event_map.html#export-the-instrument-event-mapping",
    "href": "exports_8_instr_event_map.html#export-the-instrument-event-mapping",
    "title": "14  Instrument/Event Map",
    "section": "",
    "text": "RPython\n\n\nredcap_event_instruments()\n\n%%capture\n%%R\nfinal_mapping &lt;- redcap_event_instruments(\n    redcap_uri = url, \n    token, \n    verbose = TRUE, \n    config_options = NULL\n)$data\n\n\n\n\n\n\n\nexport_instrument_event_mappings()\n\nproject.export_instrument_event_mappings(format_type='df')\n\n\n\n\n\n\n\n\n\narm_num\nunique_event_name\nform\n\n\n\n\n0\n1\npersonal_info_arm_1\ndemographics\n\n\n1\n1\ncase_intake_arm_1\nsymptoms\n\n\n2\n1\ncase_intake_arm_1\ntest_information\n\n\n3\n1\nnotifications_arm_1\nclose_contacts\n\n\n4\n1\nnotifications_arm_1\nwork_information",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Instrument/Event Map</span>"
    ]
  },
  {
    "objectID": "exports_8_instr_event_map.html#export-the-repeated-instrumentevent-mapping-pycap-only",
    "href": "exports_8_instr_event_map.html#export-the-repeated-instrumentevent-mapping-pycap-only",
    "title": "14  Instrument/Event Map",
    "section": "14.2 Export the Repeated Instrument/Event Mapping (PyCap Only)",
    "text": "14.2 Export the Repeated Instrument/Event Mapping (PyCap Only)\n\nPython\n\n\nIn REDCap projects instruments can be set to repeating and in the case of longitudinal projects, events can be set to repeating. You can use the export_repeating_instruments_events function to get a list of repeating events/instruments in your REDCap project.\n\nproject.export_repeating_instruments_events(format_type = 'df')\n\n\n\n\n\n\n\n\n\nevent_name\nform_name\ncustom_form_label\n\n\n\n\n0\ncase_intake_arm_1\nNaN\nNaN\n\n\n1\nnotifications_arm_1\nclose_contacts\nNaN\n\n\n\n\n\n\n\n\nNote in the data export above that form_name is NaN for the ‘case_intake_arm_1’ event. This means that the entire ‘case_intake_arm_1’ is repeating. Whereas, in the ‘noticications_arm_1’ event, the ‘close_contacts’ form is independently repeating (meaning it can endlessly repeat on it’s own within that event). For more informatino on repeating events and isntruments refer to Chapter 2, Chapter 3 and Chapter 4.\nIf a project is not longitudinal, there will be no event_name exported. If the project has no repeating instruments or events, the API call will fail and the error string will say: “does not contain any repeating instruments and events”",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Instrument/Event Map</span>"
    ]
  },
  {
    "objectID": "exports_9_users.html",
    "href": "exports_9_users.html",
    "title": "15  Users and User Roles",
    "section": "",
    "text": "REDCap allows strict control of user rights for each project. These rights include a user’s ability to edit, export and view data, add or edit reports, import data, create records, etc. Privileges to view and export data are specified for each instrument.\nUser roles can be set with predefined privileges and users can then be assigned to these user role groups.\nBoth REDCapR and Pycap have functions for exporting user rights.\n\nRPython\n\n\nredcap_users_export()\n\n%%capture --no-display --no-stdout\n%%R\nusers_data &lt;- redcap_users_export(redcap_uri = url, token = token)\nnames(users_data)\n\n[1] \"data_user\"       \"data_user_form\"  \"success\"         \"status_code\"    \n[5] \"outcome_message\" \"elapsed_seconds\" \"raw_text\"       \n\n\nExtract the data_user table to view who has access to the REDCap project:\nredcap_users_export output provides a list with several elements. The two most useful elements are the data_user and the data_user_form.\n\n%%capture\n%%R\nusers &lt;- users_data$data_user\n\n\n\n\n\nThere is no way to export which user is in which named user role group with REDCapR or the native API. When you export this data, if a user has been assigned to a user role group, then it will return the user with the role’s defined privileges.\nExtract the data_user_form table to view which forms each users has access to:\n\n%%capture\n%%R\nusers_forms &lt;- users_data$data_user_form\n\n\n\n\n\n\n\nexport_users(), export_user_roles(), export_user_role_assignment()\nUse export_users to view who has access to the REDCap project and what their rights are:\n\nproject.export_users(format_type='df') \n\n\n\n\n\n\n\n\n\nusername\nemail\nfirstname\nlastname\nexpiration\ndata_access_group\ndata_access_group_id\ndesign\nalerts\nuser_rights\n...\nmobile_app\nmobile_app_download_data\nrecord_create\nrecord_rename\nrecord_delete\nlock_records_all_forms\nlock_records\nlock_records_customization\nforms\nforms_export\n\n\n\n\n0\nalexey.gilman@doh.wa.gov\nAlexey.Gilman@doh.wa.gov\nAlexey\nGilman\nNaN\nrecords1_2\n2716.0\n0\n0\n1\n...\n1\n1\n1\n1\n1\n1\n0\n1\ndemographics:3,symptoms:1,test_information:3,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n1\ncaitlin.drover@doh.wa.gov\nCaitlin.Drover@doh.wa.gov\nCaitlin\nDrover\nNaN\nNaN\nNaN\n1\n1\n1\n...\n1\n0\n1\n1\n1\n0\n0\n1\ndemographics:1,symptoms:1,test_information:1,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n2\nemily.pearman@doh.wa.gov\nemily.pearman@doh.wa.gov\nEmily\nPearman\nNaN\nNaN\nNaN\n1\n1\n1\n...\n1\n1\n1\n1\n1\n0\n0\n0\ndemographics:1,symptoms:1,test_information:1,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n\n\n3 rows × 34 columns\n\n\n\n\nUse export_user_roles to view the defined user rold groups for that project and their permissions:\n\nproject.export_user_roles(format_type='df') \n\n\n\n\n\n\n\n\n\nunique_role_name\nrole_label\ndesign\nalerts\nuser_rights\ndata_access_groups\nreports\nstats_and_charts\nmanage_survey_participants\ncalendar\n...\nmobile_app\nmobile_app_download_data\nrecord_create\nrecord_rename\nrecord_delete\nlock_records_customization\nlock_records\nlock_records_all_forms\nforms\nforms_export\n\n\n\n\n0\nU-5354FA3HYL\nAdmin\n1\n1\n1\n1\n1\n1\n1\n1\n...\n1\n0\n1\n1\n1\n1\n0\n0\ndemographics:1,symptoms:1,test_information:1,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n\n\n1 rows × 29 columns\n\n\n\n\nUse export_user_role_assignment to view which user is in in which role group and data access group:\n\nproject.export_user_role_assignment(format_type='df')\n\n\n\n\n\n\n\n\n\nusername\nunique_role_name\ndata_access_group\n\n\n\n\n0\nalexey.gilman@doh.wa.gov\nNaN\nrecords1_2\n\n\n1\ncaitlin.drover@doh.wa.gov\nU-5354FA3HYL\nNaN\n\n\n2\nemily.pearman@doh.wa.gov\nNaN\nNaN\n\n\n\n\n\n\n\n\nYou can use the unique_role_name field from the export_user_roles output to see which user is assigned to which user role in the ouput of export_user_role_assignment.\n\n\n\nThe user rights tables also include information on which Data Access Group each user is assigned to. For more information on Data Access Groups see Chapter 16",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Users and User Roles</span>"
    ]
  },
  {
    "objectID": "exports_10_dags.html",
    "href": "exports_10_dags.html",
    "title": "16  Data Access Groups (DAGs)",
    "section": "",
    "text": "In addition to user roles for access control, DAGs control which records each user can access. Users assigned to a DAG can only access records assigned to that particular DAG, and are blinded to records outside of their group. DAGs are particularly useful in multi-site or multi-jurisdictional projects to restrict sites from viewing records from other sites.\nUsers can be assigned to a DAG after being added to the project. Users can be in multiple DAGs. Users not assigned to any DAG have global access and can see all records in the project.\nRecords are assigned to DAG’s using the ‘Record Status Dashboard’ in REDCap. In this project, one DAG group was created called ‘records1_2’ that contains Record IDs 1 & 2.\n\nRPython\n\n\nredcap_dag_read()\nView the DAGs and their unique data_access_group_id:\n\n%%capture\n%%R \ndag &lt;- redcap_dag_read(redcap_uri = url, token)$data\n\n\n\n\n\nUse redcap_read_oneshot to view record DAG assignments:\n\n%%capture\n%%R\ndata_dag &lt;- redcap_read_oneshot(\n    redcap_uri = url, \n    token = token,\n    export_data_access_groups = TRUE, \n    fields = \"record_id\")$data\n\n\n\n\n\nFor the REDCapR package, refer to the data_user table printed in Chapter 15 to see user DAG assignments.\n\n\nexport_dags(), export_user_dag_assignment()\nView the DAGs and their unique data_access_group_id:\n\nproject.export_dags(format_type='df') \n\n\n\n\n\n\n\n\n\ndata_access_group_name\nunique_group_name\ndata_access_group_id\n\n\n\n\n0\nLimited Access\nlimited_access\n2707\n\n\n1\nrecords1_2\nrecords1_2\n2716\n\n\n\n\n\n\n\n\nView users’ DAG assignments:\n\nproject.export_user_dag_assignment(format_type='df') #exports users and their assigned DAGs (username and DAG)\n\n\n\n\n\n\n\n\n\nusername\nredcap_data_access_group\n\n\n\n\n0\nalexey.gilman@doh.wa.gov\nrecords1_2\n\n\n1\ncaitlin.drover@doh.wa.gov\nNaN\n\n\n2\nemily.pearman@doh.wa.gov\nNaN\n\n\n\n\n\n\n\n\nUse export_records to view which records belong to which data access group.\n\ndag = project.export_records(format_type = 'df', export_data_access_groups = True, fields = 'record_id')\ndag.head()\n\n\n\n\n\n\n\n\n\n\nredcap_repeat_instrument\nredcap_repeat_instance\nredcap_data_access_group\n\n\nrecord_id\nredcap_event_name\n\n\n\n\n\n\n\n1\npersonal_info_arm_1\nNaN\nNaN\nrecords1_2\n\n\nnotifications_arm_1\nNaN\nNaN\nrecords1_2\n\n\ncase_intake_arm_1\nNaN\n1.0\nrecords1_2\n\n\n2\npersonal_info_arm_1\nNaN\nNaN\nrecords1_2\n\n\nnotifications_arm_1\nNaN\nNaN\nrecords1_2\n\n\n\n\n\n\n\n\nNote: Even though only record_id was specified for export under the fields argument, PyCap will automatically include all the variables that make the unique_key (record_id, redcap_event_name, redcap_repeat_instrument, redcap_repeat_instance).",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Data Access Groups (DAGs)</span>"
    ]
  },
  {
    "objectID": "exports_11_logging.html",
    "href": "exports_11_logging.html",
    "title": "17  Logging",
    "section": "",
    "text": "The REDCap log provides an audit trail to track record creation, deletion, update and export. It also tracks changes made to survey design and user rights.\n\nRPython\n\n\nredcap_log_read()\nThe redcap_log_read function is only available on REDCapR Version 1.1.9 and later.\n\n%%capture\n%%R\nlog &lt;- redcap_log_read(redcap_uri = url, token)$data\n\n\n\n\n\n\n\nexport_logging()\n\nlog = project.export_logging(format_type='df')\nlog.head()\n\n\n\n\n\n\n\n\n\ntimestamp\nusername\naction\ndetails\nrecord\n\n\n\n\n0\n2024-04-12 17:23\ncaitlin.drover@doh.wa.gov\nManage/Design\nExport Logging (API)\nNaN\n\n\n1\n2024-04-12 17:22\ncaitlin.drover@doh.wa.gov\nManage/Design\nExport instrument-event mappings (API)\nNaN\n\n\n2\n2024-04-12 17:22\ncaitlin.drover@doh.wa.gov\nData export (API)\nexport_format: CSV, rawOrLabel: raw, export_da...\nNaN\n\n\n3\n2024-04-12 17:22\ncaitlin.drover@doh.wa.gov\nManage/Design\nDownload data dictionary (API)\nNaN\n\n\n4\n2024-04-12 17:22\ncaitlin.drover@doh.wa.gov\nManage/Design\nExport User-DAG assignments (API)\nNaN",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Logging</span>"
    ]
  },
  {
    "objectID": "exports_12_survey_link.html",
    "href": "exports_12_survey_link.html",
    "title": "18  Survey Link (REDCapR Only)",
    "section": "",
    "text": "R\n\n\nredcap_survey_link_export_oneshot()\nTo export the survey link, the instrument must be enabled as a survey in REDCap. If it is a longitudinal survey, you must specify the event name (and instance if repeating) along with the instrument name. This export can only return a survey link for already existing records.\n\n%%capture\n%%R \nlink &lt;- redcap_survey_link_export_oneshot(\n    record = 6,\n    instrument = \"test_information\",\n    redcap_uri = url,\n    token = token,\n    event = \"case_intake_arm_1\"\n)\nresult$survey_link\n\n\n%%R\nlink$survey_link\n\n[1] \"https://dev-redcap.doh.wa.gov/surveys/?s=k4z7SZWpuKBi4mQt\"",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Survey Link (REDCapR Only)</span>"
    ]
  },
  {
    "objectID": "exports_13_redcap_version.html",
    "href": "exports_13_redcap_version.html",
    "title": "19  REDCap Version",
    "section": "",
    "text": "REDCap version can be viewed using API calls.\n\nRPython\n\n\nredcap_version()\n\n%%capture --no-stdout\n%%R\nredcap_version(\n  url,\n  token, \n  verbose = TRUE, \n  config_options = NULL\n)\n\n[1] '14.0.18'\n\n\n\n\nexport_version()\n\nproject.export_version()\n\nVersion('14.0.18')",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>REDCap Version</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html",
    "href": "exports_14_appendix.html",
    "title": "20  Appendix",
    "section": "",
    "text": "20.1 Filter Data During Export\nREDCapR and PyCap functions have options for filtering data upon export. If a REDCap project has a large amount of data that is slow to export, then we recommend using REDCapR/PyCap functions to filter the data during export when applicable.\nCreating custom reports within REDCap and then exporting those filtered reports is another option for filtering the data before export for projects with a large amount of data. See Chapter 9.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#filter-data-during-export",
    "href": "exports_14_appendix.html#filter-data-during-export",
    "title": "20  Appendix",
    "section": "",
    "text": "20.1.1 Filter By Record ID\nExport data for Record IDs 1 and 2.\n\nRPython\n\n\n\n%%capture\n%%R\ndata_by_record &lt;- redcap_read_oneshot(\n    records = c(1,2), \n    redcap_uri = url, \n    token = token\n)$data\n\n\n\n\n\n\n\n\nproject.export_records(records=['1','2'],\n                       raw_or_label='label',\n                       format_type='df').reset_index()\n\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\nphone_num\nzip_code\ndob\nage\n...\ncc_phone\ncc_email\nclose_contacts_complete\nsupervisor_name\nsupervisor_email\nwork_inperson_yesno\nwork_date\nwork_contagious\nwork_contagious_calc\nwork_information_complete\n\n\n\n\n0\n1\nPersonal Info\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n2006-04-11\n18.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nNaN\nNo\nNaN\nNo\nNaN\nComplete\n\n\n2\n1\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n1\nNotifications\nClose Contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n1\nNotifications\nClose Contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n5\n2\nPersonal Info\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n6\n2\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nfake_email@gmail.com\nYes\n2023-10-10\nYes\nNaN\nComplete\n\n\n7\n2\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n8\n2\nCase Intake\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n9\n2\nNotifications\nClose Contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n10\n2\nNotifications\nClose Contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nNaN\nIncomplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n11 rows × 48 columns\n\n\n\n\n\n\n\n\n\n20.1.2 Filter By Date\nData exports can be filtered by the date the record was added or modified. In the following example, we will view all records that were modified or added after April 9, 2024. For more information on how these records were modified, refer to the logging section of this guide. See Chapter 17.\n\nRPython\n\n\n\n%%capture\n%%R\ndata_by_date &lt;- redcap_read_oneshot(\n    redcap_uri = url, \n    token = token, \n    datetime_range_begin = as.POSIXct(\"2024/04/09\", \n                                    format = \"%Y/%m/%d\")\n)$data\n\nNote: Need to specify date format as seen above using as.POSIXct\n\n\n\n\n\n\n\nfrom datetime import datetime\nproject.export_records(date_begin=datetime.fromisoformat(\"2024-04-09\"), \n                       format_type='df')\n\n\n\n\n\n\n\n\n\n\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\nphone_num\nzip_code\ndob\nage\nethnicity\nrace\n...\ncc_phone\ncc_email\nclose_contacts_complete\nsupervisor_name\nsupervisor_email\nwork_inperson_yesno\nwork_date\nwork_contagious\nwork_contagious_calc\nwork_information_complete\n\n\nrecord_id\nredcap_event_name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\npersonal_info_arm_1\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n2006-04-11\n18.0\n1.0\n4.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nNaN\n0.0\nNaN\n0.0\nNaN\n2.0\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\npersonal_info_arm_1\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n0.0\n5.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nfake_email@gmail.com\n1.0\n2023-10-10\n1.0\nNaN\n2.0\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\ncase_intake_arm_1\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nNaN\n0.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\npersonal_info_arm_1\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\nNaN\nNaN\n1.0\n4.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nNaN\n0.0\nNaN\n0.0\nNaN\n2.0\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\nnotifications_arm_1\nclose_contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n16 rows × 46 columns\n\n\n\n\n\n\n\n\n\n20.1.3 Filter By Field Value\nExport records that reported ‘female’ for gender.\n\nRPython\n\n\n\n%%capture\n%%R\ndata_by_gender &lt;- redcap_read_oneshot(\n    redcap_uri = url, \n    token = token,\n    filter_logic = \"[gender] = '0'\" \n)$data %&gt;%\n select(c(record_id, gender))\n\n\n\n\n\nNote: When filtering on REDCap’s multiple choice variables, yes/no variables, and checkboxes, you must put quotes around the coded value when using the filter_logic argument, otherwise REDCap will not perform the filtering correctly.\n\n\n\nproject.export_records(filter_logic=\"[gender] = 0\", \n                       format_type='df'\n                      ).reset_index()[['record_id', 'gender']]\n\n\n\n\n\n\n\n\n\nrecord_id\ngender\n\n\n\n\n0\n2\n0\n\n\n1\n4\n0\n\n\n2\n6\n0\n\n\n\n\n\n\n\n\n\n\n\nExport records that reported an age greater than 20.\n\nRPython\n\n\n\n%%capture\n%%R\ndata_by_age &lt;- redcap_read_oneshot(\n    redcap_uri = url, \n    token = token, \n    filter_logic = \"[age] &gt; 20 \" \n)$data%&gt;%\n select(c(record_id, age))\n\n\n\n\n\nNote: Because age is a numeric field in REDCap, it does not need quotes around the number 20.\n\n\n\nproject.export_records(filter_logic=\"[age] &gt; 20\", \n                       format_type='df'\n                      ).reset_index()[['record_id', 'age']]\n\n\n\n\n\n\n\n\n\nrecord_id\nage\n\n\n\n\n0\n2\n29\n\n\n1\n4\n28\n\n\n2\n5\n34\n\n\n3\n6\n25",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#export-selected-fields",
    "href": "exports_14_appendix.html#export-selected-fields",
    "title": "20  Appendix",
    "section": "20.2 Export Selected Fields",
    "text": "20.2 Export Selected Fields\nExport first and last name\n\nRPython\n\n\n\n%%capture\n%%R\n#specifying record_id automatically also pulls the event, instrument and instance columns (when applicable).\nfield_subset_1 &lt;- redcap_read_oneshot(\n    fields = c(\"record_id\",\"first_name\",\"last_name\"), \n    redcap_uri = url, \n    token = token\n)$data\n\n\n\n\n\nNote: if record_id is not specified, no identifier fields will be exported. By including record_id in the fields argument, all variables that make up the unique key are automatically exported.\n\n\n\nproject.export_records(records=['3','4'], \n                       fields=[\"first_name\",\"last_name\"],\n                       format_type='df')\n\n\n\n\n\n\n\n\n\n\nredcap_repeat_instrument\nredcap_repeat_instance\nfirst_name\nlast_name\n\n\nrecord_id\nredcap_event_name\n\n\n\n\n\n\n\n\n3\npersonal_info_arm_1\nNaN\nNaN\nJohn\nDoe\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\n\n\n4\npersonal_info_arm_1\nNaN\nNaN\nJane\nDoe\n\n\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\n\n\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\n\n\ncase_intake_arm_1\nNaN\n2.0\nNaN\nNaN\n\n\n\n\n\n\n\n\nNote: if record_id is not specified, all fields that make up the unique key will still be exported.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#export-specific-instruments",
    "href": "exports_14_appendix.html#export-specific-instruments",
    "title": "20  Appendix",
    "section": "20.3 Export Specific Instruments",
    "text": "20.3 Export Specific Instruments\nSee Chapter 13 to get a list of all the instrument names in your project. Specifying instruments to export will still export all rows of the project data (including rows not relevant to the desired instrument). However, it is useful because it will only export the fields (columns) in that instrument. Use the filter_logic argument and the &lt;form&gt;_complete variable (automatically created by REDCap for each form) to get the desired output.\nIn this example, we use the symptoms_complete field to export the ‘symptoms’ form and all associated data.\n\nRPython\n\n\n\n%%capture\n%%R\n\nrecords_dem &lt;- redcap_read_oneshot(redcap_uri = url, \n                           fields = \"record_id\",\n                           forms = \"symptoms\", \n                           filter_logic = '[symptoms_complete] &lt;&gt; \"\"',\n                           token = token\n                                       )$data\n\nrecords_dem_tbl &lt;- gt(head(records_dem))\ngt::gtsave(records_dem_tbl, filename = 'export_records6.html', path = \"./files/export_files/\")\n\n\n\n\n\nNote: You must add record_id to the fields argument for the data to export with the record_id and associated unique key attached.\n\n\n\nproject.export_records(forms='symptoms',\n                       filter_logic =\"[symptoms_complete] &lt;&gt;''\",\n                       format_type='df')\n\n\n\n\n\n\n\n\n\n\nredcap_repeat_instrument\nredcap_repeat_instance\nsymptoms_yesno\nsymptom_onset\nsymptoms_exp___1\nsymptoms_exp___2\nsymptoms_exp___3\nsymptoms_exp___4\nsymptoms_exp___5\nsymptoms_exp___6\nsymptoms_exp___7\nsymptoms_exp___8\nsymptoms_exp___9\nsymptoms_exp___10\nsymptoms_exp___11\nsymptom_notes\nsymptoms_complete\n\n\nrecord_id\nredcap_event_name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\ncase_intake_arm_1\nNaN\n1\n1\n2023-10-09\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\nNaN\n2\n\n\n2\ncase_intake_arm_1\nNaN\n1\n1\n2023-10-11\n1\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\nNaN\n2\n\n\ncase_intake_arm_1\nNaN\n2\n1\n2021-06-05\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n0\nNaN\n2\n\n\n3\ncase_intake_arm_1\nNaN\n1\n1\n2023-10-09\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\nNaN\n2\n\n\n4\ncase_intake_arm_1\nNaN\n1\n1\n2023-10-11\n1\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\nNaN\n2\n\n\ncase_intake_arm_1\nNaN\n2\n1\n2021-06-05\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n0\nNaN\n2\n\n\n5\ncase_intake_arm_1\nNaN\n1\n1\n2023-10-08\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nNaN\n2\n\n\n6\ncase_intake_arm_1\nNaN\n1\n1\n2023-10-02\n0\n0\n0\n0\n0\n1\n1\n1\n1\n0\n0\nNaN\n2\n\n\n\n\n\n\n\n\nNote: if record_id is not specified, all fields that make up the unique key will still be exported.",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#sec-csv",
    "href": "exports_14_appendix.html#sec-csv",
    "title": "20  Appendix",
    "section": "20.4 Export Data as CSV (PyCap Only)",
    "text": "20.4 Export Data as CSV (PyCap Only)\n\nPython\n\n\nIn Section 8.2 and Section 9.2, it was noted that to export labeled headers, the data needs to be exported as a csv. See the example below on how to do this.\n\nfrom io import StringIO\n\ndata_csv = StringIO(project.export_records(records='2',\n                       raw_or_label='label',\n                       raw_or_label_headers='label', \n                       format_type='csv'))\ndf_csv = pd.read_csv(data_csv, sep=',')\ndf_csv\n\n\n\n\n\n\n\n\n\nRecord ID\nEvent Name\nRepeat Instrument\nRepeat Instance\nFirst Name\nLast Name\nPhone Number\nZIP Code\nDate of birth\nAge (years)\n...\nPhone number of close contact\nEmail of close contact\nComplete?.3\nSupervisor Name\nSupervisor email\nDo you ever work in-person?\nDate you last worked in-person?\nWas this person at work while contagious? Symptom Onset Date: [case_intake_arm_1][symptom_onset]\nWas this person at work while contagious?\nComplete?.4\n\n\n\n\n0\n2\nPersonal Info\nNaN\nNaN\nJane\nDoe\n(999) 999-9999\n98105.0\n1994-06-29\n29.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n2\nNotifications\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nfake_email@gmail.com\nYes\n2023-10-10\nYes\nNaN\nComplete\n\n\n2\n2\nCase Intake\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n2\nCase Intake\nNaN\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n2\nNotifications\nClose Contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\nComplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n5\n2\nNotifications\nClose Contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nNaN\nIncomplete\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n6 rows × 48 columns",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#creating-a-reference-class-redcapr-only",
    "href": "exports_14_appendix.html#creating-a-reference-class-redcapr-only",
    "title": "20  Appendix",
    "section": "20.5 Creating a Reference Class (REDCapR only)",
    "text": "20.5 Creating a Reference Class (REDCapR only)\n\nR\n\n\nThis Reference Class represents a REDCap project. Once some values are set that are specific to a REDCap project (such as the URI and token), later calls are less verbose (such as reading and writing data).\nFirst, define the project:\n\n%%capture\n%%R\nproject &lt;- REDCapR::redcap_project$new(redcap_uri=url, token=token)\nds_all &lt;- project$read()\n\n\n%%capture\n%%R\ndata &lt;- project$read(fields = c(\"record_id\", \"gender\", \"first_name\"))$data\n\n\n\n\n\nPull the record_id for all ‘female’ records:\n\n%%R\n\nrecord_of_females &lt;- data$record_id[data$gender=='0']\nrecord_of_females\n\n [1] NA NA  2 NA NA NA NA NA  4 NA NA NA NA NA  6 NA NA",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#clean-checkbox-choices-redcapr-only",
    "href": "exports_14_appendix.html#clean-checkbox-choices-redcapr-only",
    "title": "20  Appendix",
    "section": "20.6 Clean Checkbox Choices (REDCapR Only)",
    "text": "20.6 Clean Checkbox Choices (REDCapR Only)\n\nR\n\n\nREDCapR has a checkbox_choices function that can be used to neatly list all answer options for a checkbox field.\nFirst pull the metadata:\n\n%%capture\n%%R\n\nmetadata &lt;- redcap_metadata_read(\n    redcap_uri = url, \n    token = token\n)$data\n\nSelect the checkbox field that you would like to view:\n\n%%R\nsymptoms_exp &lt;- metadata[metadata$field_name == \"symptoms_exp\",]$select_choices_or_calculations\nsymptoms_exp_list &lt;- REDCapR::checkbox_choices(select_choices=symptoms_exp)\nsymptoms_exp_list\n\n# A tibble: 11 x 2\n   id    label              \n   &lt;chr&gt; &lt;chr&gt;              \n 1 1     Sore Throat        \n 2 2     Cough              \n 3 3     Shortness of Breath\n 4 4     Chest Pain         \n 5 5     Headache           \n 6 6     Runny Nose         \n 7 7     Congestion         \n 8 8     Fever              \n 9 9     Body Aches         \n10 10    Nausea/Vomiting    \n11 11    Diarrhea",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "exports_14_appendix.html#redcap-constants-redcapr-only",
    "href": "exports_14_appendix.html#redcap-constants-redcapr-only",
    "title": "20  Appendix",
    "section": "20.7 REDCap Constants (REDCapR Only)",
    "text": "20.7 REDCap Constants (REDCapR Only)\n\nR\n\n\nYou can quickly search for the numerical values of several ‘constants’ within REDCap. For example, when exporting data from REDCap, all instruments end with a variable called &lt;form_name&gt;_complete that when exported as raw data will take the values of 0, 1 or 2. You can see what each numerical value means by using constant(\"form_incomplete\") and constant(\"form_complete\").\nOther constants across all REDCap projects include the values for the various user rights settings. For a full list of constants available, refer to the following documentation.\nView the &lt;form_name&gt;_complete REDCap constant values:\n\n%%R\nREDCapR::constant(c(\n  \"form_incomplete\",\n  \"form_complete\",\n  \"form_unverified\"\n))\n\n[1] 0 2 1",
    "crumbs": [
      "Exporting from REDCap",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "import_2_records.html",
    "href": "import_2_records.html",
    "title": "21  Records",
    "section": "",
    "text": "RPython\n\n\nredcap_write_oneshot() and redcap_write()\nRecords can be imported into a REDCap project from a dataframe in R using redcap_write_oneshot() to write a records all at once, or using redcap_write() which can batch the records to be imported so the server is not overwhelmed in the case of large imports. These methods will accept either an R dataframe or tibble containing the data to be imported.\nIf the record_id(s) being imported already exists in the REDCap project, the imported data will overwrite the previously existing data for that record. Using a record_id that does not already exist will create a new record. See Section 8.4 on how to use the API to find the next available record_id.\nThe overwrite_with_blanks argument is set to ‘FALSE’ by default; under this setting, if blank values are imported for fields on existing REDCap records and that data is not missing in REDCap, these values will not be overwritten as missing. If you want to overwrite existing data as missing, be sure to use overwrite_with_blanks = 'TRUE'.\n\n%%capture --no-display \n%%R\n# Define data to import\ndf1 &lt;- data.frame(record_id = c(7,8),\n                  first_name = c(\"John\",\"Jane\"),\n                  last_name = c(\"Doe\",\"Doe\")\n                  )\n\n\n%%capture --no-stdout \n%%R\nredcap_write_oneshot(df1, redcap_uri=url, token=token)\n\n$success\n[1] TRUE\n\n$status_code\n[1] 200\n\n$outcome_message\n[1] \"2 records were written to REDCap in 0.6 seconds.\"\n\n$records_affected_count\n[1] 2\n\n$affected_ids\n[1] \"7\" \"8\"\n\n$elapsed_seconds\n[1] 0.634845\n\n$raw_text\n[1] \"\"\n\n\n\n\n%%R\ndf2 &lt;- data.frame(record_id = 9,\n                  first_name = \"John\",\n                  last_name = \"Doe\"\n                  )\n\n\n%%capture --no-stdout \n%%R\nredcap_write(df2, redcap_uri=url, token=token)\n#optional argument: batch_size = 100 (default)\n\n$success\n[1] TRUE\n\n$status_code\n[1] \"200\"\n\n$outcome_message\n[1] \"1 records were written to REDCap in 0.4 seconds.\"\n\n$records_affected_count\n[1] 1\n\n$affected_ids\n[1] \"9\"\n\n$elapsed_seconds\n[1] 0.934711\n\n\n\n\n\nimport_records()\nData can be imported as a pandas dataframe, json, csv, or xml, specified by the import_format argument (default is json).\nIf the record_id(s) being imported already exists in the REDCap project, the imported data will overwrite the previously existing data for that record. Using a record_id that does not already exist will create a new record. The force_auto_number = 'True' argument will automatically reassign existing record_ids to new record_ids during import. If set to ‘False’ and your Record ID’s to import already exist in REDCap, they will overwrite the existing REDCap records during import. You can also see Section 8.4 on how to use the API to find the next available record_id.\nThe overwrite argument is set to ‘normal’ by default; under this setting, if blank values are imported for fields on existing REDCap records and that data is not missing in REDCap, these values will not be overwritten as missing. If you want to overwrite existing data as missing, be sure to use overwrite = 'overwrite'.\n\ndf_py = [{'record_id': 7,\n  'redcap_event_name': 'personal_info_arm_1',\n  'redcap_repeat_instrument': '',\n  'redcap_repeat_instance': None,\n  'first_name': 'John',\n  'last_name': 'Doe'},\n {'record_id': 8,\n  'redcap_event_name': 'personal_info_arm_1',\n  'redcap_repeat_instrument': '',\n  'redcap_repeat_instance': None,\n  'first_name': 'Jane',\n  'last_name': 'Doe'}]\n\nproject.import_records(df_py, force_auto_number=True)\n\n{'count': 2}\n\n\n\n\n\nNote: For troubleshooting import errors, please thoroughly review Chapter 27. This chapter goes into to detail about the limitations to importing and provides more detailed import examples.",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Records</span>"
    ]
  },
  {
    "objectID": "import_3_files.html",
    "href": "import_3_files.html",
    "title": "22  Files",
    "section": "",
    "text": "Files are optional attachments to individual records.\nFile uploads are a unique field type in REDCap that accept a variety of file types, including images and other documents. Unlike other export methods, importing files only works for one file field for one record at a time.\nIf the project has repeating events (i.e. a longitudinal project), the event name that the record is in must be specified. If the file field of interest is in a repeat instance, the instance number must also be specified.\n\nRPython\n\n\nredcap_file_upload_oneshot()\n\n%%capture --no-stdout \n%%R\nredcap_file_upload_oneshot(file_name='./files/test_file.png', record=7, field='test_upload', event='case_intake_arm_1', redcap_uri=url, token=token)\n\n$success\n[1] TRUE\n\n$status_code\n[1] 200\n\n$outcome_message\n[1] \"file uploaded to REDCap in 1.0 seconds.\"\n\n$records_affected_count\n[1] 1\n\n$affected_ids\n[1] \"7\"\n\n$elapsed_seconds\n[1] 1.024144\n\n$raw_text\n[1] \"\"\n\n\n\n\n\nimport_file()\n\ntmp_file = tempfile.TemporaryFile()\nproject.import_file(record=\"7\",\n                 field=\"test_upload\", \n                 file_name=\"./files/test_file.png\",\n                 file_object=tmp_file,\n                 event=\"case_intake_arm_1\")\n\n[{}]\n\n\nThe output is a list of an empty JSON object, as expected for a successful file import using this method.",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Files</span>"
    ]
  },
  {
    "objectID": "import_4_metadata.html",
    "href": "import_4_metadata.html",
    "title": "23  Metadata",
    "section": "",
    "text": "Metadata refers to the project’s set up characteristics, including field attributes grouped by instrument assignment. Metadata can be thought of as the project’s data dictionary.\nIn these examples, we will export the project metadata and re-import it so that no changes are made to the project.\n\nRPython\n\n\nredcap_metadata_write()\n\n%%R\nmetadata &lt;- redcap_metadata_read(redcap_uri=url, token=token)$data\n\nR[write to console]: The data dictionary describing 30 fields was read from REDCap in 0.7 seconds.  The http status code was 200.\n\n\n\n\n\n\n%%capture --no-stdout \n%%R\nredcap_metadata_write(metadata, redcap_uri=url, token=token)\n\n$success\n[1] TRUE\n\n$status_code\n[1] 200\n\n$outcome_message\n[1] \"30 fields were written to the REDCap dictionary in 0.7 seconds.\"\n\n$field_count\n[1] 30\n\n$elapsed_seconds\n[1] 0.688035\n\n$raw_text\n[1] \"\"\n\n\n\n\n\nimport_metadata()\n\nmetadata = project.metadata\nmetadata[0]\n\n{'field_name': 'record_id',\n 'form_name': 'demographics',\n 'section_header': '',\n 'field_type': 'text',\n 'field_label': 'Study ID',\n 'select_choices_or_calculations': '',\n 'field_note': '',\n 'text_validation_type_or_show_slider_number': '',\n 'text_validation_min': '',\n 'text_validation_max': '',\n 'identifier': '',\n 'branching_logic': '',\n 'required_field': '',\n 'custom_alignment': '',\n 'question_number': '',\n 'matrix_group_name': '',\n 'matrix_ranking': '',\n 'field_annotation': ''}\n\n\n\nproject.import_metadata(to_import=metadata)\n\n30",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "import_5_instr_event_map.html",
    "href": "import_5_instr_event_map.html",
    "title": "24  Instrument Event Map",
    "section": "",
    "text": "This shows which instruments are associated with each event in longitudinal projects.\n\nRPython\n\n\nCannot be imported using REDCapR. See Section 27.1 for more information.\n\n\nimport_instrument_event_mappings()\nIn this example, we will export the project’s instrument-event mapping and re-import it so that no changes are made to the project.\n\ninstrument_event_mappings = project.export_instrument_event_mappings(format_type='df')\ninstrument_event_mappings\n\n\n\n\n\n\n\n\n\narm_num\nunique_event_name\nform\n\n\n\n\n0\n1\npersonal_info_arm_1\ndemographics\n\n\n1\n1\ncase_intake_arm_1\nsymptoms\n\n\n2\n1\ncase_intake_arm_1\ntest_information\n\n\n3\n1\nnotifications_arm_1\nclose_contacts\n\n\n4\n1\nnotifications_arm_1\nwork_information\n\n\n\n\n\n\n\n\n\nproject.import_instrument_event_mappings(instrument_event_mappings, import_format='df')\n\n5",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Instrument Event Map</span>"
    ]
  },
  {
    "objectID": "import_6_users.html",
    "href": "import_6_users.html",
    "title": "25  Users and User Roles",
    "section": "",
    "text": "25.1 Users",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Users and User Roles</span>"
    ]
  },
  {
    "objectID": "import_6_users.html#users",
    "href": "import_6_users.html#users",
    "title": "25  Users and User Roles",
    "section": "",
    "text": "RPython\n\n\nCannot be imported with REDCapR. See Section 27.1 for more information.\n\n\nimport_users()\nIn this example, we will export the project’s users and re-import it so that no changes are made to the project.\n\nusers = project.export_users(format_type='df')\nusers\n\n\n\n\n\n\n\n\n\nusername\nemail\nfirstname\nlastname\nexpiration\ndata_access_group\ndata_access_group_id\ndesign\nalerts\nuser_rights\n...\nmobile_app\nmobile_app_download_data\nrecord_create\nrecord_rename\nrecord_delete\nlock_records_all_forms\nlock_records\nlock_records_customization\nforms\nforms_export\n\n\n\n\n0\nalexey.gilman@doh.wa.gov\nAlexey.Gilman@doh.wa.gov\nAlexey\nGilman\nNaN\nNaN\nNaN\n1\n1\n1\n...\n1\n0\n1\n1\n1\n0\n0\n1\ndemographics:3,symptoms:1,test_information:1,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n1\ncaitlin.drover@doh.wa.gov\nCaitlin.Drover@doh.wa.gov\nCaitlin\nDrover\nNaN\nNaN\nNaN\n1\n1\n1\n...\n1\n0\n1\n1\n1\n0\n0\n1\ndemographics:3,symptoms:1,test_information:1,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n2\nemily.pearman@doh.wa.gov\nemily.pearman@doh.wa.gov\nEmily\nPearman\nNaN\nNaN\nNaN\n1\n1\n1\n...\n1\n1\n1\n1\n1\n0\n0\n0\ndemographics:1,symptoms:1,test_information:1,c...\ndemographics:1,symptoms:1,test_information:1,c...\n\n\n\n\n3 rows × 34 columns\n\n\n\n\n\nproject.import_users(users, import_format='df')\n\n3\n\n\nNote: attemping to import a user already assigned to a user role will result in an error.",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Users and User Roles</span>"
    ]
  },
  {
    "objectID": "import_6_users.html#user-roles",
    "href": "import_6_users.html#user-roles",
    "title": "25  Users and User Roles",
    "section": "25.2 User Roles",
    "text": "25.2 User Roles\n\nRPython\n\n\nCannot be imported with REDCapR. See Section 27.1 for more information.\n\n\nRoles can be imported using import_user_roles() and assigned to a project user using import_user_role_assignment().\nImporting User Roles\n\nuser_roles = project.export_user_roles(format_type='df')\nuser_roles\n\n\n\n\n\n\n\n\n\nunique_role_name\nrole_label\ndesign\nalerts\nuser_rights\ndata_access_groups\nreports\nstats_and_charts\nmanage_survey_participants\ncalendar\n...\nmobile_app\nmobile_app_download_data\nrecord_create\nrecord_rename\nrecord_delete\nlock_records_customization\nlock_records\nlock_records_all_forms\nforms\nforms_export\n\n\n\n\n0\nU-1564393FT9\nLimited Role\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\ndemographics:0,symptoms:0,test_information:0,c...\ndemographics:0,symptoms:0,test_information:0,c...\n\n\n1\nU-5354FA3HYL\nAdmin\n1\n1\n1\n1\n1\n1\n1\n1\n...\n1\n0\n1\n1\n1\n1\n0\n0\ndemographics:3,symptoms:1,test_information:1,c...\ndemographics:3,symptoms:1,test_information:1,c...\n\n\n\n\n2 rows × 29 columns\n\n\n\n\nNote: the unique_role_name is automatically generated by REDCap.\n\nproject.import_user_roles(user_roles, import_format='df')\n\n3\n\n\nImporting User Role Assignments\n\nuser_role_assign = project.export_user_role_assignment(format_type='df')\nuser_role_assign\n\n\n\n\n\n\n\n\n\nusername\nunique_role_name\ndata_access_group\n\n\n\n\n0\nalexey.gilman@doh.wa.gov\nNaN\nNaN\n\n\n1\ncaitlin.drover@doh.wa.gov\nNaN\nNaN\n\n\n2\nemily.pearman@doh.wa.gov\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nuser_role_assign['unique_role_name'].astype(str).replace('nan', np.NaN)\nuser_role_assign.loc[0,'unique_role_name'] = 'U-5354FA3HYL'\nuser_role_assign\n\n\n\n\n\n\n\n\n\nusername\nunique_role_name\ndata_access_group\n\n\n\n\n0\nalexey.gilman@doh.wa.gov\nU-5354FA3HYL\nNaN\n\n\n1\ncaitlin.drover@doh.wa.gov\nNaN\nNaN\n\n\n2\nemily.pearman@doh.wa.gov\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nproject.import_user_role_assignment(user_role_assign, import_format='df')\n\n3",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Users and User Roles</span>"
    ]
  },
  {
    "objectID": "import_7_dags.html",
    "href": "import_7_dags.html",
    "title": "26  Data Access Groups (DAGs)",
    "section": "",
    "text": "In addition to user roles for access control, DAGs control which records each user can access. Users assigned to a DAG can only access records assigned to that particular DAG, and are blinded to records outside of their group. DAGs are particularly useful in multi-site or multi-jurisdictional projects to restrict sites from viewing records from other sites.\nUsers can be assigned to a DAG after being added to the project. Users can be in multiple DAGs. Users not assigned to any DAG have global access and can see all records in the project.\nRecords are assigned to DAG’s using the ‘Record Status Dashboard’ in REDCap.\n\nRPython\n\n\nCannot be imported with REDCapR. See Section 27.1 for more information.\n\n\nDAGs can be imported using import_dags() and assigned using import_user_dag_assignment(). If the API user is assigned to multiple DAGs, they can be switched between DAGs using switch_dag().\nView the current DAGs by exporting them:\n\ndags = project.export_dags(format_type='df')\ndags\n\n\n\n\n\n\n\n\n\ndata_access_group_name\nunique_group_name\ndata_access_group_id\n\n\n\n\n0\nFull Access\nfull_access\n2708\n\n\n1\nLimited Access\nlimited_access\n2709\n\n\n\n\n\n\n\n\nCreate and import a new DAG:\n\nnew_dag = [{\"data_access_group_name\": \"Test DAG\", \"unique_group_name\": \"\"}]\nproject.import_dags(new_dag)\n\n1\n\n\nNote: the unique_group_name field must be left blank as this is auto-generated by REDCap from the data_access_group_name.\nThe newly created DAG can now be seen and assigned to.\n\ndags = project.export_dags(format_type='df')\ndags\n\n\n\n\n\n\n\n\n\ndata_access_group_name\nunique_group_name\ndata_access_group_id\n\n\n\n\n0\nFull Access\nfull_access\n2708\n\n\n1\nLimited Access\nlimited_access\n2709\n\n\n2\nTest DAG\ntest_dag\n2721\n\n\n\n\n\n\n\n\n\ndag_mapping = [{\"username\": 'alexey.gilman@doh.wa.gov', \"redcap_data_access_group\": \"test_dag\"}]\nproject.import_user_dag_assignment(dag_mapping)\n\n1\n\n\nNote: the redcap_data_access_group name when importing is the same as unique_group_name when exporting DAGs.",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Data Access Groups (DAGs)</span>"
    ]
  },
  {
    "objectID": "import_8_appendix.html",
    "href": "import_8_appendix.html",
    "title": "27  Appendix",
    "section": "",
    "text": "27.1 Limitations to Importing",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "import_8_appendix.html#sec-import_limitations",
    "href": "import_8_appendix.html#sec-import_limitations",
    "title": "27  Appendix",
    "section": "",
    "text": "RPython\n\n\nField Names\n- Field names cannot be imported using REDCapR.\n- Can be exported using redcap_variables().\nForms/Instruments  - Forms and instruments cannot be imported using REDCapR. Can be uploaded as a ZIP file in the REDCap web application under the ‘Designer’ page of the REDCap Project.\n- Can be downloaded as pdf using redcap_instrument_download(). \nInstrument/Event Map  - Instrument/event mapping cannot be imported using REDCapR. Can be imported with REDCap’s native API or uploaded as a CSV in the REDCap web application under the ‘Designate Instruments for My Events’ on the ‘Project Setup’ page of the REDCap project. - Can be exported using redcap_event_instruments(). \nReports  - Cannot be imported using REDCapR.  - Can be exported using redcap_report(). \nUsers  - Cannot be imported using REDCapR. Can be imported with REDCap’s native API or uploaded as a CSV in the REDCap web application under the ‘User Rights’ page of the REDCap Project.  - Can be exported using redcap_users_export(). \nUser Roles  - Cannot be imported using REDCapR. Can be imported with REDCap’s native API or uploaded as a CSV in the REDCap web application under the ‘User Rights’ page of the REDCap Project.  - Can be exported using redcap_users_export(). \nData Access Groups (DAGs)  - Cannot be imported using REDCapR. Can be imported with REDCap’s native API or uploaded as a CSV inthe REDCap web application under the ‘DAGs’ page of the REDCap Project.  - Can be exported using redcap_dag_read(). \nLogging  - Cannot be imported.  - Can be exported using redcap_log_read(). \n\n\nField Names  - Field names alone cannot be imported using PyCap. \n- Can be exported using export_field_names(). \nForms/Instruments  - Forms and instruments cannot be imported using PyCap. Can be uploaded as a ZIP file in the REDCap web application under the ‘Designer’ page of the REDCap Project.  - Can be exported using export_instruments() and export_repeating_instruments_events() for the settings. \nReports  - Reports cannot be imported using PyCap. \n- Can be exported using export_records(). \nLogging  - Logging cannot be imported using PyCap. \n- Can be exported using export_logging().",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "import_8_appendix.html#general-import-notes-regardless-of-package-used",
    "href": "import_8_appendix.html#general-import-notes-regardless-of-package-used",
    "title": "27  Appendix",
    "section": "27.2 General Import notes (regardless of package used)",
    "text": "27.2 General Import notes (regardless of package used)\n\n27.2.1 REDCap Validations\n\nIdentifiers\n\nNo duplicates in the unique key.\n\nNote: Duplicates in the unique key will be automatically dropped during import (only one occurence of the duplicate will be uploaded) without any warning or error message. The output message only lists the number of unique ids that were imported.\n\nIf redcap_repeat_instrument is part of the unique key its value must be valid and associated with the correct event.\n\nException for longitudinal projects with repeating events and no repeating instruments: Data exported form these projects will have the ‘redcap_repeat_instrument’ column with all values set to NA. This column is technically not needed in this type of project and API import will be accepted with (as long as all values are NA) or without it.\n\n\nData Structure\n\nThat non-missing fields are in the correct instrument/event row (for longitudinal projects or projects with repeating instruments).\nThat ‘redcap_repeat_instance’ is filled when required and missing when required (for projects with repeating events or instruments).\nThat there are no extra columns in the data being imported that are not fields in the REDCap project.\n\nValues\n\nRadio and Dropdown Fields\n\nThat values are within the set of select_choices_or_calculations as defined in the metadata.\n\nText Fields\n\nThat only numeric values are present in numeric validation fields.\n\nThat only integer values are present in integer validation fields.\n\nThat date and datetime fields are in the YMD format (can be YYYY/MM/DD or YYYY-MM-DD).\n\nThat email fields are formatted as ‘something’ + @ + ‘something’ + . + ‘something’ (does not check for valid domain names; multiple ‘.somethings’ are accepted after @ symbol (e.g., email@doh.wa.gov)).\n\nThat phone numbers have 10 digits and that the area code starts with digits 2-9 (can have ###-###-#### format or just ##########).\n\nThat zipcode fields have either 5 or 9 digits, and if 9 digits there is a hyphen after the 5th digit.\n\nThat ‘alpha only’ text validation fields contain only letters (no spaces, numbers, or punctuation).\n\nThat there are only 10 digits in the fields with MRN 10 digit validation fields.\n\nThat there are only digits and ‘-’ or ‘_’ in fields with MRN generic validation fields.\n\nSlider Fields\n\nThat slider field values are within the text_validation_min and text_validation_max range as defined in the metadata.\n\nCheckbox, True/False, Yes/No Fields\n\nValues must be 0 or 1 or missing.\n\nText Box (no validation) and Notes box\n\nValues are less than 65,000 characters.\n\nCalculated Fields\n\nRegardless of the value in the data attempting to be imported, REDCap will auto-calculate these fields (assuming all of the inputs to the calculation are available). The values being imported are ignored.\n\nFiles and Signature Fields\n\nRegardless of the value in the data attempting to be imported, REDCap will ignore these fields when importing records. All file-type field imports are done through a separate process.\n\nDynamic Query Fields\n\nThat values are within the dynamic query options (value options not exported in metadata).\n\n\nNOT Validated\n\nA second instance of a repeating event or instrument can be uploaded without a first instance exisiting (in import data or existing project data).\nData can be imported outside of the specified validation range for text fields with the following validation types: dates, times, datetimes, integers, and numbers. Recommendation: run Data Quality rule D after import.\nMissing required fields can be imported. Recommendation: run Data Quality rule B after upload.\nIncorrect calculated field values can be imported. Recommendation: run Data Quality rule H after upload.\nFiles and Signature fields can only be imported through the file import method, any data attempting to be imported using the record import method is ignored.\nField values that violate the REDCap project branching logic can be imported via the API without issues, however, when you go to open that record in REDCap it will alert you to the invalid logic.\n\nREDCap Log Behavior\n\nIf data for an existing record is imported via the API but the incoming fields for that records are the same values as the fields already stored for that record in REDCap (no changes made), the API import will run, however, there will be no ‘Update record (API)’ action logged for this record.\nIf a row containing a valid combination of unique fields but NA accross all other fields is imported via API, the import will run. However, this ‘blank’ record will not be created and there will be no action logged in the REDCap log for this record..",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "import_8_appendix.html#data-validation-tools",
    "href": "import_8_appendix.html#data-validation-tools",
    "title": "27  Appendix",
    "section": "27.3 Data Validation Tools",
    "text": "27.3 Data Validation Tools\n\nR\n\n\nREDCapR has a few data validation functions that can be used to check your data before importing it to your REDCap project. These validations will not be specific to your paricular REDCap project but are general validations that apply to all REDCap projects.\nFor example, you can check if you have any boolean values (True/False) since REDCap will only accept a raw data import of 0/1 integers. You can also check for duplicates and unique IDs. You can view more details on these data validation functions here.",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "import_8_appendix.html#sec-import_csv",
    "href": "import_8_appendix.html#sec-import_csv",
    "title": "27  Appendix",
    "section": "27.4 Example: Uploading Records from a CSV",
    "text": "27.4 Example: Uploading Records from a CSV\nIn this example, we have a csv named “data_to_import.csv” with records to upload.\n\nRPython\n\n\n\n%%R\ndf_to_import &lt;- read.csv(\"./files/data_to_import.csv\")\n\n\n\nThere are multiple rows per record because this project is longitudinal with repeat instruments and events.\n\n%%R\n# view which record_id's are currently being used in the data set to import. \nunique(df_to_import$record_id)\n\n[1] 3 4 5 6\n\n\nIn the dataframe we will import, the record IDs are 3-6. However, these record IDs already exist in the REDCap project and importing this data would overwrite the exisiting record IDs 3-6. If we want to import these as new records, we will need to renumber the record IDs.\n\n%%R\n# start by getting the next available record_id\nnext_record &lt;- redcap_next_free_record_name(redcap_uri=url, token=token)\n\nR[write to console]: The next free record name in REDCap was successfully determined in 1.1 seconds.  The http status code was 200.  Is is 10.\n\n\n\n\n%%R\n### sequence the df_to_import records starting at one\ndf_to_import &lt;- df_to_import[order(df_to_import$record_id), , drop = FALSE]\ndf_to_import$seq &lt;- as.numeric(factor(df_to_import$record_id))\n\n\n%%capture\n%%R\nsequencing &lt;- df_to_import %&gt;% group_by(record_id, seq) %&gt;% summarize(n=n())\n\n\n%%R \nhead(sequencing)\n\n# A tibble: 4 x 3\n# Groups:   record_id [4]\n  record_id   seq     n\n      &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n1         3     1     5\n2         4     2     6\n3         5     3     4\n4         6     4     5\n\n\n\n%%R\n# Adjust record IDs to start at the next available record_id\ndf_to_import$record_id &lt;- as.numeric(df_to_import$seq) + (as.numeric(next_record)-1)\nunique(df_to_import$record_id)\n\n[1] 10 11 12 13\n\n\nThe record IDs have been changed to new record IDs that don’t already exist in the REDCap project.\n\n%%R\n# Remove the seq var that was created above\ndf_to_import &lt;- df_to_import %&gt;% select(-seq)\n\nFormatting Date Fields\nDate fields in REDCap are character fields with a designated date validation added. There are many different types of date validations/formats that can be chosen for a date field. All date fields must be imported to REDCap formatted as YYYY-MM-DD, regardless of the specific date format designated for this field in the REDCap project. (PyCap has an import records argument to change the default YMD format, but REDCapR does not have this option.) Below is an example on how to use the project metadata to isolate and format all date fields before importing data.\n\n%%R\n# Export metadata\nmetadata &lt;- redcap_metadata_read(redcap_uri = url, token = token)$data\n\nR[write to console]: The data dictionary describing 30 fields was read from REDCap in 0.2 seconds.  The http status code was 200.\n\n\n\n\n\nNote that the ‘text_validation_type_or_show_slider_number’ field in the metadata is where the date format is specified.\n\n%%R\nunique(metadata$text_validation_type_or_show_slider_number)\n\n[1] NA         \"phone\"    \"integer\"  \"date_mdy\" \"email\"   \n\n\n\n%%R\n# Isolate all field_names in the metadata that have any date validation \ndate_fields &lt;- metadata %&gt;% filter(grepl(\"date\", text_validation_type_or_show_slider_number)) %&gt;% select(field_name)\n\n\n%%R\n# Make a list of all the date fields\ndate_list &lt;- (date_fields$field_name)\ndate_list\n\n[1] \"dob\"                \"symptom_onset\"      \"test_positive_date\"\n[4] \"prior_covid_date\"   \"cc_date\"            \"work_date\"         \n\n\n\n%%R\n# mutate across all date fields to get the desired Y-M-D format.  \ndf_to_import2 &lt;- df_to_import %&gt;%\n  mutate(across(all_of(date_list), ~as.Date(., \"%m/%d/%Y\" )))\n\n\n%%R\nunique(df_to_import2$test_positive_date)\n\n[1] NA           \"2023-10-10\" \"2023-10-12\" \"2021-06-07\" \"2023-10-03\"\n\n\nNow import the new records.\n\n%%capture --no-stdout\n%%R\nredcap_write(df_to_import2, redcap_uri=url, token=token)\n\n$success\n[1] TRUE\n\n$status_code\n[1] \"200\"\n\n$outcome_message\n[1] \"4 records were written to REDCap in 1.8 seconds.\"\n\n$records_affected_count\n[1] 4\n\n$affected_ids\n[1] \"10\" \"11\" \"12\" \"13\"\n\n$elapsed_seconds\n[1] 2.354373\n\n\n\n\n\nWhen reading a csv as a pandas dataframe, Python will take any numeric column with missing data and convert them to float with NaN inserted in the blank cells. In longitudinal projects, we expect many blank cells since the data is wide, as only columns relevant to that event/instrument field are filled out in each row. Many of REDCap’s field types (checkbox, yes/no, radio, and form_complete variables) are integers. Pandas will convert these columns to float variables with a decimal place added (e.g. 1.0 instead of 1 for ‘Yes’ in a yes/no field) and importing this to REDCap will fail.\n\n# Read and view data to import\ndf_to_import = pd.read_csv(\"./files/data_to_import.csv\")\ndf_to_import.head()\n\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nredcap_repeat_instance\nredcap_survey_identifier\ndemographics_timestamp\nfirst_name\nlast_name\nphone_num\nzip_code\n...\ncc_phone\ncc_email\nclose_contacts_complete\nsupervisor_name\nsupervisor_email\nwork_inperson_yesno\nwork_date\nwork_contagious\nwork_contagious_calc\nwork_information_complete\n\n\n\n\n0\n3\npersonal_info_arm_1\nNaN\nNaN\nNaN\nNaN\nJohn\nDoe\n(999) 999-9999\n98105.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n3\nnotifications_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nBoss\nNaN\n0.0\nNaN\n0.0\nNaN\n2.0\n\n\n2\n3\ncase_intake_arm_1\nNaN\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n3\nnotifications_arm_1\nclose_contacts\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n3\nnotifications_arm_1\nclose_contacts\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\n(999) 999-9999\nfake_email@gmail.com\n2.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 50 columns\n\n\n\n\nNotice how the redcap_repeat_instance, close_contacts_complete, and work_inperson_yesno are some of the many fields that were converted to float with an added decimal. Importing this dataset as-is will produce errors.\nSolution: Convert all floats to Int64 Pandas datatype.\n\nInt64 is a unique pandas datatype that allows numeric fields to contain missing values. For more information, read the documentation here.\nNote: Before applying this solution, ensure that there are no numeric fields in your REDCap project that should have decimals (you will not want to convert these variables to int64 since they would lose their decimal places). Make sure you are familiar with your project’s metadata. All radio, checkboxes, yes/no, redcap_repeat_instance, and form_complete variables need to be integers. In REDCap, actual numeric fields are stored as text fields with optional validation. Any text field in REDCap with no validation or with ‘numeric’ as their validation type will accept numbers with decimal places. Any text fields with other validations types (i.e. zip code, phone number, integer) will not accept decimals.\n\n\nfloat_list = df_to_import.select_dtypes(include=[np.float64]).columns.values.tolist()\nprint(float_list)\n\n['redcap_repeat_instance', 'redcap_survey_identifier', 'demographics_timestamp', 'zip_code', 'age', 'ethnicity', 'race', 'gender', 'demographics_complete', 'symptoms_yesno', 'symptoms_exp___1', 'symptoms_exp___2', 'symptoms_exp___3', 'symptoms_exp___4', 'symptoms_exp___5', 'symptoms_exp___6', 'symptoms_exp___7', 'symptoms_exp___8', 'symptoms_exp___9', 'symptoms_exp___10', 'symptoms_exp___11', 'symptom_notes', 'symptoms_complete', 'test_yesno', 'test_positive_yesno', 'prior_covid_yesno', 'test_information_complete', 'close_contacts_complete', 'work_inperson_yesno', 'work_contagious', 'work_contagious_calc', 'work_information_complete']\n\n\nAt this point, if needed, you can remove any variables from this list that you need to keep as a float.\n\ndf_to_import[float_list] = df_to_import[float_list].apply(lambda x: x.astype(\"Int64\"))\ndf_to_import.head()\n\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nredcap_repeat_instance\nredcap_survey_identifier\ndemographics_timestamp\nfirst_name\nlast_name\nphone_num\nzip_code\n...\ncc_phone\ncc_email\nclose_contacts_complete\nsupervisor_name\nsupervisor_email\nwork_inperson_yesno\nwork_date\nwork_contagious\nwork_contagious_calc\nwork_information_complete\n\n\n\n\n0\n3\npersonal_info_arm_1\nNaN\n&lt;NA&gt;\n&lt;NA&gt;\n&lt;NA&gt;\nJohn\nDoe\n(999) 999-9999\n98105\n...\nNaN\nNaN\n&lt;NA&gt;\nNaN\nNaN\n&lt;NA&gt;\nNaN\n&lt;NA&gt;\n&lt;NA&gt;\n&lt;NA&gt;\n\n\n1\n3\nnotifications_arm_1\nNaN\n&lt;NA&gt;\n&lt;NA&gt;\n&lt;NA&gt;\nNaN\nNaN\nNaN\n&lt;NA&gt;\n...\nNaN\nNaN\n&lt;NA&gt;\nBoss\nNaN\n0\nNaN\n0\n&lt;NA&gt;\n2\n\n\n2\n3\ncase_intake_arm_1\nNaN\n1\n&lt;NA&gt;\n&lt;NA&gt;\nNaN\nNaN\nNaN\n&lt;NA&gt;\n...\nNaN\nNaN\n&lt;NA&gt;\nNaN\nNaN\n&lt;NA&gt;\nNaN\n&lt;NA&gt;\n&lt;NA&gt;\n&lt;NA&gt;\n\n\n3\n3\nnotifications_arm_1\nclose_contacts\n1\n&lt;NA&gt;\n&lt;NA&gt;\nNaN\nNaN\nNaN\n&lt;NA&gt;\n...\n(999) 999-9999\nfake_email@gmail.com\n2\nNaN\nNaN\n&lt;NA&gt;\nNaN\n&lt;NA&gt;\n&lt;NA&gt;\n&lt;NA&gt;\n\n\n4\n3\nnotifications_arm_1\nclose_contacts\n2\n&lt;NA&gt;\n&lt;NA&gt;\nNaN\nNaN\nNaN\n&lt;NA&gt;\n...\n(999) 999-9999\nfake_email@gmail.com\n2\nNaN\nNaN\n&lt;NA&gt;\nNaN\n&lt;NA&gt;\n&lt;NA&gt;\n&lt;NA&gt;\n\n\n\n\n5 rows × 50 columns\n\n\n\n\nYou can now see the redcap_repeat_instance and close_contacts_complete fields are integers. The &lt;NA&gt; seen in the blank cells will not interfere with data import. Now you can make any other edits necessary and import the data successfully.\n\n# Import data\nproject.import_records(df_to_import, date_format = 'MDY', import_format = 'df')\n\n{'count': 4}",
    "crumbs": [
      "Importing to REDCap",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]